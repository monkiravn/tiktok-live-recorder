version: "3.8"

services:
  redis:
    image: redis:7-alpine
    ports:
      - "6377:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - RECORDINGS_DIR=/recordings
      - API_KEYS=dev-key,prod-key-change-me
      - RATE_LIMIT_PER_MIN=60
      - TLR_ROOT=/app/src
      - CORS_ALLOW_ORIGINS=http://localhost:3000
      # S3 Configuration (uncomment and configure as needed)
      # - S3_BUCKET=my-recordings-bucket
      # - S3_ENDPOINT_URL=https://s3.amazonaws.com
      # - AWS_ACCESS_KEY_ID=your-access-key
      # - AWS_SECRET_ACCESS_KEY=your-secret-key
      # - AWS_REGION=us-east-1
    volumes:
      - recordings:/recordings
      - ./cookies.json:/app/cookies.json:ro # Optional: mount cookies file
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  worker:
    build:
      context: .
      dockerfile: Dockerfile.api
    command:
      [
        "celery",
        "-A",
        "service.celery_app.celery",
        "worker",
        "-Q",
        "default,recording",
        "-l",
        "info",
        "--concurrency",
        "2",
      ]
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - RECORDINGS_DIR=/recordings
      - TLR_ROOT=/app/src
      # S3 Configuration (same as API)
      # - S3_BUCKET=my-recordings-bucket
      # - AWS_ACCESS_KEY_ID=your-access-key
      # - AWS_SECRET_ACCESS_KEY=your-secret-key
      # - AWS_REGION=us-east-1
    volumes:
      - recordings:/recordings
      - ./cookies.json:/app/cookies.json:ro # Optional: mount cookies file
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD", "celery", "-A", "service.celery_app.celery", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  flower:
    build:
      context: .
      dockerfile: Dockerfile.api
    command:
      [
        "celery",
        "-A",
        "service.celery_app.celery",
        "flower",
        "--broker=redis://redis:6379/0",
        "--port=5555",
      ]
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - TLR_ROOT=/app/src
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Optional: Prometheus for metrics collection
  # prometheus:
  #   image: prom/prometheus:latest
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - API_BASE_URL=http://api:8000
      - API_KEY=dev-key
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - api

volumes:
  recordings:
    driver: local
  redis_data:
    driver: local
